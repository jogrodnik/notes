To update the .dockerconfigjson in a Kubernetes docker-secret to include additional registries, follow these steps:

Steps to Update .dockerconfigjson in docker-secret
Fetch the Existing Secret: Extract the current .dockerconfigjson from the secret.

kubectl get secret docker-secret -n <namespace> -o jsonpath='{.data.\.dockerconfigjson}' | base64 -d > dockerconfig.json

Replace <namespace> with the namespace where the secret resides.

Modify dockerconfig.json: Edit the dockerconfig.json file to include credentials for the new registries. The structure of the file should look like this:

{
    "auths": {
        "registry1.com": {
            "username": "user1",
            "password": "pass1",
            "email": "email1@example.com",
            "auth": "base64(username:password)"
        },
        "registry2.com": {
            "username": "user2",
            "password": "pass2",
            "email": "email2@example.com",
            "auth": "base64(username:password)"
        }
    }
}

Add the new registries under the auths section.

Calculate the auth field for each registry using the command:

echo -n 'username:password' | base64
Encode the Modified File to Base64: After editing, encode the file in Base64 format.

cat dockerconfig.json | base64 -w 0 > dockerconfig.b64
Update the Secret: Patch the existing secret with the updated .dockerconfigjson.

kubectl patch secret docker-secret -n <namespace> \
  --patch "$(echo -e '{"data":{".dockerconfigjson":"'"$(cat dockerconfig.b64)"'"}}')"
Verify the Updated Secret: Check if the secret is updated successfully.

kubectl get secret docker-secret -n <namespace> -o jsonpath='{.data.\.dockerconfigjson}' | base64 -d | jq
If jq is not installed, you can manually inspect the output.

Restart Workloads if Necessary: If this secret is used in workloads, restart them to apply the updated secret.

kubectl rollout restart deployment/<deployment-name> -n <namespace>
