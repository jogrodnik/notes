rotate_key() {
    local service_account=$1
    local service_name=${service_account%@*}  # Strip domain part of the email
    local access_token=$2

    log_message "Starting key rotation for $service_account"

    # Step 1: Generate a new key using IAM API
    local new_key_file="/tmp/${service_name}_key.json"
    local create_key_url="https://iam.googleapis.com/v1/projects/$PROJECT_ID/serviceAccounts/$service_account/keys"

    curl -s -X POST "$create_key_url" \
        -H "Authorization: Bearer $access_token" \
        -H "Content-Type: application/json" \
        -d '{"privateKeyType": "TYPE_GOOGLE_CREDENTIALS_FILE"}' > "$new_key_file"

    log_message "Created new key for $service_account and saved to $new_key_file"

    # Step 2: Define the GCS path for the new key and upload it to a dedicated folder
    local gcs_key_path="gs://${BUCKET_NAME}/${service_name}/keys/$(date +%Y%m%d%H%M%S)_key.json"
    gsutil cp "$new_key_file" "$gcs_key_path"
    log_message "Uploaded new key to $gcs_key_path"

    # Step 3: Move the previous key to a backup folder
    log_message "Moving previous key to backup for $service_account"
    local existing_keys=($(gsutil ls "gs://${BUCKET_NAME}/${service_name}/keys/" | sort | tail -n 2))

    if [ "${#existing_keys[@]}" -gt 1 ]; then
        # Move the second latest key to the backup folder
        previous_key="${existing_keys[0]}"
        backup_key_path="gs://${BUCKET_NAME}/${service_name}/backup/$(basename "$previous_key")"
        gsutil mv "$previous_key" "$backup_key_path"
        log_message "Moved previous key to $backup_key_path"
    fi

    # Step 4: Delete any additional keys in the main folder beyond the latest two
    local extra_keys=($(gsutil ls "gs://${BUCKET_NAME}/${service_name}/keys/" | sort | head -n -2))
    for old_key in "${extra_keys[@]}"; do
        gsutil rm "$old_key"
        log_message "Deleted old key from bucket: $old_key"
    done

    # Step 5: List and delete old IAM keys, keeping only the latest one
    log_message "Listing IAM keys for $service_account sorted by creation time"
    local list_keys_url="https://iam.googleapis.com/v1/projects/$PROJECT_ID/serviceAccounts/$service_account/keys"
    local keys_to_delete=($(curl -s -X GET "$list_keys_url" \
        -H "Authorization: Bearer $access_token" \
        -H "Content-Type: application/json" \
        | jq -r '.keys | sort_by(.validAfterTime) | .[0:-1] | .[].name'))

    for old_key in "${keys_to_delete[@]}"; do
        local delete_key_url="https://iam.googleapis.com/v1/$old_key"
        curl -s -X DELETE "$delete_key_url" \
            -H "Authorization: Bearer $access_token" \
            -H "Content-Type: application/json"
        log_message "Deleted old IAM key for $service_account: $old_key"
    done

    # Step 6: Clean up the local new key file
    rm "$new_key_file"
}
